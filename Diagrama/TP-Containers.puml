@startuml

title ** Diseño TP **

abstract class Barco{
   - id: Integer
   - maxConteiners: Integer
   - maxPeso : Double 
   - conteiner : ArrayList<Contenedor>
   - sedeInicial
   - sedeFinal 
   - kmRecorridos 
   - kmTotal
   - esEspecial: boolean 
   - pesoActual: Double 

   + getId(): Integer 
   + setId(Integer): void
   + getMaxConteiners(): Integer 
   + setMaxConteiners(Integer): void
   + getMaxPeso(): Double
   + setMaxPeso(Double): void
   + getContenedor(): Contenedor
   + setContenedor(Contenedor): void
   + sumaKmRecorridos(): Double 
   + descargar()

}

class Camion{
   - patente: String 
   - costoFijo : double 20000 
   - conteiner : Contenedor 
   - ocupado: boolean 

   + getPatente(): String
   + setPatente(String): void
   + getCostoFijo(): Double 
   + setCostoFijo(Double): void
   + getContenedor(): Contenedor
   + setContenedor(Contenedor): void

   + llevaConteiner(): boolean
}

abstract Class Contenedor{
   - id: Integer 
   - exterior: Medida 
   - interior: Medida  
   - pies: Integer 
   - maxPeso: Double 
   - maxVolumen: Double 
   - precioBase: Double
   - hayEspacio : boolean 
   - esEspecial : boolean
   - mercaderia: ArrayList<Mercaderia>
   - pesoActual : Double 
   - volumenActual: Double 
   - cantidadCargaCompleta: Integer 

   + getId(): String 
   + setId(String): void
   + getExterior(): Exterior
   + setExterior(Exterior): void
   + getInterior(): Interior
   + getMaxPeso(): Double
   + setMaxPeso(Double): void
   + getMaxVolumen(): Double
   + setMaxVolumen(Double): void 
   + getPrecioBase(): Double
   + setPrecioBase(Double): void
   + getPies(): Integer 
   + setPies(Integer): void 
   + isEspecial(): boolean
   + setIsEspecial(boolean): void 
   + calcularEspacio(): 
   + validarCargaCompletaUnica(): void 
}

Class Medida{
   - ancho: Double 
   - alto: Double 
   - largo: Double 
  
   + getAncho(): Double 
   + setAncho(Double): void
   + getLargo(): Double 
   + setLargo(Double): void 
   + getAlto(): Double 
   + setAlto(Double): void
}

class Cliente{
   - nombre
   - dni
   - nroCliente 
   - mercaderia: ArrayList<Mercaderia>
   - servicioAPuerta: boolean 

   + getNombre(): String 
   + setNombre(String): void
   + getDni(): Integer 
   + setDni(Integer): void
   + getNroCliente(): Integer 
   + setNroCliente(Integer): void

}

class Despacho{
   - MAX_CAMIONES = 5
   - Cliente : Cliente 
   - retiro: boolean 
   - conteinerCompleto: boolean  
   - Container : Container 
   - Barcos: ArrayList<Barco>
   - Camiones: ArrayList[MAX_CAMIONES]

   + getCliente(): Cliente 
   + setCliente(Cliente): void
   + setRetiro(boolean): void
   + setConteinerCompleto(boolean): void
   + getRetiro(): boolean
   + obtenerPrecio():
   + conteinerMayorViajeCompleto(): Conteiner 
   + barcoMaxKms(): Barco 
   + barcoMinKms(): Barco 
   + cargarBarco(Contenier): void 
   + cargarConteiner(Mercaderia): void 
}

class Mercaderia{
   - id : Integer 
   - nombre : String 
   - peso : Double 
   - volumen : Double 
   - medida : Medida
   - esEspecial: boolean 
}

' Relaciones 

Barco <|-- BarcoBasico
Barco <|-- BarcoEspecializado
Barco <-- Contenedor

Contenedor <|-- Basico
Contenedor <|-- BasicoHC
Contenedor <|-- FlatRack
Contenedor <-- Medida

Camion <-- Contenedor

Medida <|-- Exterior 
Medida <|-- Interior
Despacho <-- Cliente
Despacho o-- Camion
Despacho <-- Barco
Despacho <-- Contenedor

Cliente *-- Mercaderia

'Notas

note as n1 
   - Cuando sale un conteiner??
   - Conteiner Especial aparte o tipo ?¡?¡
   - Mecanica gruas, hay que separar??
   - Completa un cliente o varios
   - como usar diccionarios
end note

note left of Despacho::cargarBarco
  Verifica el maxConteiners
  calcular el total de peso de los conteiners (Se puede usar otro metodo)
  Dependiendo del tipo de conteiner lo deriva al barco correspondiente
  usar append()
end note 

note left of Despacho::cargarConteiner
   Recibe mercaderia del cliente
   verifica si tiene espacio el conteiner (peso y medidas)
   Dependiendo la verificacion anterior lo deribe a distintos conteiners 
end note 


note right of Barco::sumaKmRecorridos
  Usa el GPS, y adentro del metodo descargar
  llamar a esta funcion.

end note

note left of Despacho::obtenerPrecio
  return preciobase + tabla de precios + km que
   trae del barco
end note 

note left of Contenedor::validarCargaCompletaUnica
  recorre los id de las mercancias, si es el mismo 
  y si lo completo. Y lo setea en cantidadCargaCompleta
end note


@enduml